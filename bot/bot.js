require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const fs = require('fs');
const archiver = require('archiver');

const {
  TG_BOT_TOKEN,
  TG_USER_ID,
  DOMAIN,
  POSTGRES_PASSWORD,
  N8N_ENCRYPTION_KEY
} = process.env;

if (!TG_BOT_TOKEN || !TG_USER_ID || !DOMAIN || !POSTGRES_PASSWORD || !N8N_ENCRYPTION_KEY) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
  process.exit(1);
}

const bot = new TelegramBot(TG_BOT_TOKEN, { polling: true });
const send = (msg, opt = {}) => bot.sendMessage(TG_USER_ID, msg, opt);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('message', (msg) => {
  if (msg.chat.id.toString() !== TG_USER_ID) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return bot.sendMessage(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /status
bot.onText(/\/status/, () => {
  exec('uptime && docker ps --format "{{.Names}}\t{{.Status}}"', (e, o, er) => 
    send(er ? `‚ùå ${er}` : `üìä *–°—Ç–∞—Ç—É—Å:*\n\`\`\`\n${o}\n\`\`\``, { parse_mode: 'Markdown' })
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /logs
bot.onText(/\/logs/, () => {
  exec('docker logs --tail 100 n8n-app', (e, o, er) => 
    send(er ? `‚ùå ${er}` : `üìù *–õ–æ–≥–∏ n8n:*\n\`\`\`\n${o}\n\`\`\``, { parse_mode: 'Markdown' })
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /backup
bot.onText(/\/backup/, () => {
  const exportCmd = 'docker exec n8n-app n8n export:workflow --all --separate --output=/tmp/workflows';
  exec(exportCmd, (e, o, er) => {
    if (er) return send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ${er}`);

    const tmpBackupDir = '/tmp/n8n_backup';
    const archivePath = '/tmp/n8n_backup.zip';

    fs.rmSync(tmpBackupDir, { recursive: true, force: true });
    fs.rmSync(archivePath, { force: true });
    fs.mkdirSync(tmpBackupDir, { recursive: true });

    exec('docker cp n8n-app:/tmp/workflows/. ' + tmpBackupDir, (e2) => {
      if (e2) return send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã: ${e2}`);

      const extraFiles = [
        '/opt/n8n/n8n_data/database.sqlite',
        '/opt/n8n/n8n_data/config',
        '/opt/n8n/n8n_data/postgres_password.txt',
        '/opt/n8n/n8n_data/n8n_encryption_key.txt'
      ];

      for (const file of extraFiles) {
        if (fs.existsSync(file)) {
          fs.copyFileSync(file, `${tmpBackupDir}/${path.basename(file)}`);
        }
      }

      const output = fs.createWriteStream(archivePath);
      const archive = archiver('zip', { zlib: { level: 9 } });

      archive.pipe(output);
      archive.directory(tmpBackupDir, false);
      archive.finalize();

      output.on('close', () => {
        send(`‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: \n\`\`\`\n${archivePath}\n\`\`\``);
      });
    });
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /update
bot.onText(/\/update/, () => {
  exec('docker pull kalininlive/n8n:yt-dlp && docker-compose down && docker-compose up -d', (e, o, er) => 
    send(er ? `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${er}` : `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\`\`\`\n${o}\n\`\`\``, { parse_mode: 'Markdown' })
  );
});

const TelegramBot = require('node-telegram-bot-api');
const { execSync, exec } = require('child_process');
const fs = require('fs');
require('dotenv').config();

const token = process.env.TG_BOT_TOKEN;
const userId = process.env.TG_USER_ID;
const bot = new TelegramBot(token, { polling: true });

function isAuthorized(msg) {
  return String(msg.chat.id) === String(userId);
}

function send(text) {
  bot.sendMessage(userId, text, { parse_mode: 'Markdown' });
}

// /start ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  if (!isAuthorized(msg)) return;
  send('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äî –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n/logs ‚Äî –õ–æ–≥–∏ n8n\n/backups ‚Äî –ë—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é\n/update ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n');
});

// /status ‚Äî –∞–ø—Ç–∞–π–º –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
bot.onText(/\/status/, () => {
  try {
    const uptime = execSync('uptime -p').toString().trim();
    const containers = execSync('docker ps --format "{{.Names}} ({{.Status}})"').toString().trim();
    send(`üü¢ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± Uptime: ${uptime}\n\nüì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:\n${containers}`);
  } catch (err) {
    send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// /logs ‚Äî –ª–æ–≥–∏ n8n
bot.onText(/\/logs/, () => {
  try {
    const logs = execSync('docker logs --tail=50 n8n-app').toString();
    send(`üìù –õ–æ–≥–∏ n8n:\n\`\`\`\n${logs}\n\`\`\``);
  } catch (err) {
    send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏');
  }
});

// /backups ‚Äî –∑–∞–ø—É—Å–∫ backup_n8n.sh
bot.onText(/\/backups/, () => {
  try {
    execSync('/opt/n8n-install/scripts/backup_n8n.sh');
    send('üì¶ –ë—ç–∫–∞–ø –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤ Telegram...');
  } catch (err) {
    send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ backup:\n\`\`\`\n${err.message}\n\`\`\``);
  }
});

// /update ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n
bot.onText(/\/update/, () => {
  try {
    const latest = execSync('npm view n8n version').toString().trim();
    const current = execSync('docker exec n8n-app n8n -v').toString().trim();

    if (latest === current) {
      send(`‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è n8n (${current})`);
    } else {
      send(`‚è¨ –û–±–Ω–æ–≤–ª—è—é n8n —Å ${current} –¥–æ ${latest}...`);
      execSync('docker pull n8nio/n8n');
      execSync('docker compose stop n8n');
      execSync('docker compose rm -f n8n');
      execSync('docker compose up -d --no-deps --build n8n');
      send(`‚úÖ n8n –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${latest}`);
    }
  } catch (err) {
    send('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
  }
});

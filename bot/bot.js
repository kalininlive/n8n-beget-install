const TelegramBot = require('node-telegram-bot-api');
const { execSync, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const token = process.env.TG_BOT_TOKEN;
const userId = process.env.TG_USER_ID;

if (!token || !userId) {
  console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TG_BOT_TOKEN –∏ TG_USER_ID.");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

function isAuthorized(msg) {
  return String(msg.chat.id) === String(userId);
}

function send(text) {
  bot.sendMessage(userId, text, { parse_mode: 'Markdown' });
}

// /start
bot.onText(/\/start/, (msg) => {
  if (!isAuthorized(msg)) return;
  send(`ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  /status ‚Äî –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
  /logs ‚Äî –õ–æ–≥–∏ n8n
  /backups ‚Äî –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø
  /update ‚Äî –û–±–Ω–æ–≤–∏—Ç—å n8n (—Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø)`);
});

// /status
bot.onText(/\/status/, (msg) => {
  if (!isAuthorized(msg)) return;
  try {
    const uptime = execSync('uptime -p').toString().trim();
    const containers = execSync('docker ps --format "{{.Names}} ({{.Status}})"').toString().trim();
    send(`üü¢ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± Uptime: ${uptime}\n\nüì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:\n${containers}`);
  } catch (err) {
    send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// /logs
bot.onText(/\/logs/, (msg) => {
  if (!isAuthorized(msg)) return;
  exec('docker logs --tail=100 n8n-app', (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞:\n\`\`\`\n${error.message}\n\`\`\``);
      return;
    }

    const MAX_LEN = 3900;
    const trimmed = stdout.length > MAX_LEN ? stdout.slice(-MAX_LEN) : stdout;

    if (stdout.length > MAX_LEN) {
      const logPath = '/tmp/n8n_logs.txt';
      fs.writeFileSync(logPath, stdout);
      bot.sendDocument(userId, logPath, {}, { caption: 'üìù –õ–æ–≥–∏ n8n (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)' });
    } else {
      send(`üìù –õ–æ–≥–∏ n8n:\n\`\`\`\n${trimmed}\n\`\`\``);
    }
  });
});

// /backups
bot.onText(/\/backups/, (msg) => {
  if (!isAuthorized(msg)) return;
  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');
  send('üì¶ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...');
  exec(`/bin/bash ${backupScriptPath}`, (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞:\n\`\`\`\n${error.message}\n\`\`\``);
    } else {
      send('‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –ê—Ä—Ö–∏–≤ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç–æ–º.');
    }
  });
});

// /update
bot.onText(/\/update/, (msg) => {
  if (!isAuthorized(msg)) return;
  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');

  send('üîÑ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—é –±—ç–∫–∞–ø...');
  exec(`/bin/bash ${backupScriptPath}`, (error) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞:\n\`\`\`\n${error.message}\n\`\`\`\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
      return;
    }

    send('‚¨áÔ∏è –û–±–Ω–æ–≤–ª—è—é n8n...');
    try {
      const latest = execSync('npm view n8n version').toString().trim();
      const current = execSync('docker exec n8n-app n8n -v').toString().trim();

      if (latest === current) {
        send(`‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è n8n (${current})`);
      } else {
        execSync('docker pull n8nio/n8n');
        execSync('docker compose stop n8n');
        execSync('docker compose rm -f n8n');
        execSync('docker compose up -d --no-deps --build n8n');
        send(`‚úÖ n8n –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${latest}`);
      }
    } catch (err) {
      send('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
    }
  });
});

const TelegramBot = require('node-telegram-bot-api');
const { execSync, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
require('dotenv').config();

const token = process.env.TG_BOT_TOKEN;
const userId = process.env.TG_USER_ID;

if (!token || !userId) {
  console.error("‚ùå TG_BOT_TOKEN –∏–ª–∏ TG_USER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

function isAuthorized(msg) {
  return String(msg.chat.id) === String(userId);
}

function send(text) {
  bot.sendMessage(userId, text, { parse_mode: 'Markdown' });
}

// === /start ‚Äî —Å–ø—Ä–∞–≤–∫–∞ ===
bot.onText(/\/start/, (msg) => {
  if (!isAuthorized(msg)) return;
  send(
    'ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
    '/status ‚Äî –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n' +
    '/logs ‚Äî –õ–æ–≥–∏ n8n\n' +
    '/backups ‚Äî –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n' +
    '/update ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n'
  );
});

// === /status ‚Äî –∞–ø—Ç–∞–π–º –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã ===
bot.onText(/\/status/, (msg) => {
  if (!isAuthorized(msg)) return;
  try {
    const uptime = execSync('uptime -p').toString().trim();
    const containers = execSync('docker ps --format "{{.Names}} ({{.Status}})"').toString().trim();
    send(`üü¢ *–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç*\n‚è± Uptime: ${uptime}\n\nüì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:\n${containers}`);
  } catch {
    send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// === /logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ n8n ===
bot.onText(/\/logs/, (msg) => {
  if (!isAuthorized(msg)) return;
  try {
    const logs = execSync('docker logs --tail=50 n8n-app').toString();
    send(`üìù *–õ–æ–≥–∏ n8n:*\n\`\`\`\n${logs}\n\`\`\``);
  } catch {
    send('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ n8n');
  }
});

// === /backups ‚Äî –∑–∞–ø—É—Å–∫ backup_n8n.sh ===
bot.onText(/\/backups/, (msg) => {
  if (!isAuthorized(msg)) return;

  send('üì¶ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...');

  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');

  exec(`/bin/bash ${backupScriptPath}`, (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞:\n\`\`\`\n${error.message}\n\`\`\``);
      return;
    }
    if (stderr && stderr.trim()) {
      send(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n\`\`\`\n${stderr}\n\`\`\``);
      return;
    }

    send(`‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω.`);
  });
});

// === /update ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n –ø–æ—Å–ª–µ –±—ç–∫–∞–ø–∞ ===
bot.onText(/\/update/, (msg) => {
  if (!isAuthorized(msg)) return;

  send('üîÑ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—é –±—ç–∫–∞–ø...');

  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');

  exec(`/bin/bash ${backupScriptPath}`, (error) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞:\n\`\`\`\n${error.message}\n\`\`\`\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`);
      return;
    }

    try {
      const latest = execSync('npm view n8n version').toString().trim();
      const current = execSync('docker exec n8n-app n8n -v').toString().trim();

      if (latest === current) {
        send(`‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è n8n (${current})`);
      } else {
        send(`‚è¨ –û–±–Ω–æ–≤–ª—è—é n8n —Å ${current} –¥–æ ${latest}...`);
        execSync('docker pull n8nio/n8n');
        execSync('docker compose stop n8n');
        execSync('docker compose rm -f n8n');
        execSync('docker compose up -d --no-deps --build n8n');
        send(`‚úÖ n8n –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${latest}`);
      }
    } catch (err) {
      send('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
    }
  });
});

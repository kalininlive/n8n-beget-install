const TelegramBot = require('node-telegram-bot-api');
const { execSync, exec } = require('child_process');
const path = require('path');
const fs = require('fs');

// === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
const token = process.env.TG_BOT_TOKEN;
const userId = process.env.TG_USER_ID;

if (!token || !userId) {
  console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

function isAuthorized(msg) {
  return String(msg.chat.id) === String(userId);
}

function send(text) {
  bot.sendMessage(userId, text, { parse_mode: 'Markdown' });
}

// /start ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  if (!isAuthorized(msg)) return;
  send('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äî –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n/logs ‚Äî –õ–æ–≥–∏ n8n\n/backups ‚Äî –ë—ç–∫–∞–ø –≤—Ä—É—á–Ω—É—é\n/update ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n');
});

// /status ‚Äî –∞–ø—Ç–∞–π–º –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
bot.onText(/\/status/, (msg) => {
  if (!isAuthorized(msg)) return;
  try {
    const uptime = execSync('uptime -p').toString().trim();
    const containers = execSync('docker ps --format "{{.Names}} ({{.Status}})"').toString().trim();
    send(`üü¢ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± Uptime: ${uptime}\n\nüì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:\n${containers}`);
  } catch (err) {
    send('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// /logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ n8n
bot.onText(/\/logs/, (msg) => {
  if (!isAuthorized(msg)) return;

  exec('docker logs --tail=100 n8n-app', (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏:\n\`\`\`\n${error.message}\n\`\`\``);
      return;
    }

    if (stderr && stderr.trim()) {
      send(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n\`\`\`\n${stderr}\n\`\`\``);
      return;
    }

    const MAX_LEN = 3900;
    const trimmed = stdout.length > MAX_LEN ? stdout.slice(-MAX_LEN) : stdout;

    if (stdout.length > MAX_LEN) {
      // –õ–æ–≥–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      const fs = require('fs');
      const logPath = '/tmp/n8n_logs.txt';
      fs.writeFileSync(logPath, stdout);

      bot.sendDocument(userId, logPath, {}, {
        caption: 'üìù –õ–æ–≥–∏ n8n (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)'
      });
    } else {
      send(`üìù –õ–æ–≥–∏ n8n:\n\`\`\`\n${trimmed}\n\`\`\``);
    }
  });
});

// /backups ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç backup_n8n.sh
bot.onText(/\/backups/, (msg) => {
  if (!isAuthorized(msg)) return;

  send('üì¶ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ n8n...');

  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');

  exec(`/bin/bash ${backupScriptPath}`, (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ backup:\n\`\`\`\n${error.message}\n\`\`\``, { parse_mode: 'Markdown' });
      return;
    }

    if (stderr && stderr.trim()) {
      send(`‚ö†Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ –±—ç–∫–∞–ø–∞ –±—ã–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n\`\`\`\n${stderr}\n\`\`\``, { parse_mode: 'Markdown' });
      return;
    }

    send('‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram ‚Äî –∞—Ä—Ö–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
  });
});

// /update ‚Äî —Å–Ω–∞—á–∞–ª–∞ backup, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n
bot.onText(/\/update/, (msg) => {
  if (!isAuthorized(msg)) return;

  send('‚è≥ –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...');

  const backupScriptPath = path.resolve('/opt/n8n-install/backup_n8n.sh');

  exec(`/bin/bash ${backupScriptPath}`, (error, stdout, stderr) => {
    if (error) {
      send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ backup:\n\`\`\`\n${error.message}\n\`\`\`\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.`, { parse_mode: 'Markdown' });
      return;
    }

    send('‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n...');

    try {
      const latest = execSync('npm view n8n version').toString().trim();
      const current = execSync('docker exec n8n-app n8n -v').toString().trim();

      if (latest === current) {
        send(`‚úÖ –£ –≤–∞—Å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è n8n (${current})`);
      } else {
        send(`‚è¨ –û–±–Ω–æ–≤–ª—è—é n8n —Å ${current} –¥–æ ${latest}...`);
        execSync('docker pull n8nio/n8n');
        execSync('docker-compose stop n8n');
        execSync('docker-compose rm -f n8n');
        execSync('docker-compose up -d --no-deps --build n8n');
        send(`‚úÖ n8n –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${latest}`);
      }
    } catch (err) {
      send('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
    }
  });
});


#!/usr/bin/env bash
set -euo pipefail

# 0) ‚Äî –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
read -p "1) –í–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: n8n.example.com): " DOMAIN
read -p "2) E-mail –¥–ª—è ACME (Let's Encrypt): " EMAIL
read -p "3) –õ–æ–≥–∏–Ω BASIC auth –¥–ª—è n8n: " BASIC_AUTH_USER
read -s -p "4) –ü–∞—Ä–æ–ª—å BASIC auth –¥–ª—è n8n: " BASIC_AUTH_PASS; echo
read -p "5) Telegram BOT_TOKEN: " TG_BOT_TOKEN
read -p "6) –í–∞—à TG_USER_ID: " TG_USER_ID
read -s -p "7) –ü–∞—Ä–æ–ª—å –¥–ª—è Postgres: " POSTGRES_PASSWORD; echo
read -p "8) –í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–º–µ–Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–ø–æ–∫ (–æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ https://$DOMAIN/static/<–∏–º—è>): " -a STATIC_DIRS

# 1) ‚Äî –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É, Docker –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã
apt update && apt upgrade -y
apt install -y \
  ca-certificates \
  curl \
  gnupg \
  lsb-release \
  ufw \
  git \
  nano \
  uuid-runtime \
  openssl

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v docker &>/dev/null; then
  curl -fsSL https://get.docker.com | sh
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω Docker Compose v2, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if ! docker compose version &>/dev/null; then
  apt install -y docker-compose-plugin
fi

# 2) ‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è n8n
if command -v uuidgen &>/dev/null; then
  N8N_ENCRYPTION_KEY=$(uuidgen)
else
  N8N_ENCRYPTION_KEY=$(openssl rand -hex 32)
fi
echo "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω N8N_ENCRYPTION_KEY: $N8N_ENCRYPTION_KEY"

# 3) ‚Äî –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UFW
ufw allow OpenSSH
ufw allow http
ufw allow https
ufw --force enable

# 4) ‚Äî –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
BASE="/opt/n8n"
mkdir -p "$BASE"/{data,traefik,static,bot}
cd "$BASE"
for d in "${STATIC_DIRS[@]}"; do
  mkdir -p "$BASE/static/$d"
done

# –°–æ–∑–¥–∞—ë–º acme.json –¥–ª—è Traefik
touch "$BASE/traefik/acme.json"
chmod 600 "$BASE/traefik/acme.json"

# 5) ‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .env
cat > "$BASE/.env" <<EOF
DOMAIN=$DOMAIN
EMAIL=$EMAIL
BASIC_AUTH_USER=$BASIC_AUTH_USER
BASIC_AUTH_PASS=$BASIC_AUTH_PASS
N8N_ENCRYPTION_KEY=$N8N_ENCRYPTION_KEY
TG_BOT_TOKEN=$TG_BOT_TOKEN
TG_USER_ID=$TG_USER_ID
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
EOF

# 6) ‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º docker-compose.yml
cat > "$BASE/docker-compose.yml" <<EOF
version: "3.8"

services:
  traefik:
    image: traefik:2.10.4
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=\${EMAIL}"
      - "--certificatesresolvers.le.acme.storage=/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json:rw
    networks:
      - n8n_net

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=n8n
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - n8n_net

  redis:
    image: redis:7-alpine
    volumes:
      - redisdata:/data
    networks:
      - n8n_net

  n8n:
    image: n8nio/n8n:latest
    depends_on:
      - postgres
      - redis
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${BASIC_AUTH_PASS}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_HOST=${DOMAIN}
      - WEBHOOK_URL=https://${DOMAIN}/
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - GENERIC_TIMEZONE=Europe/Amsterdam
      - QUEUE_BULL_REDIS_HOST=redis
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\\"${DOMAIN}\\")"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=le"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    volumes:
      - ./data:/home/node/.n8n
    networks:
      - n8n_net

  static:
    image: nginx:alpine
    volumes:
      - ./static:/usr/share/nginx/html:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.static.rule=Host(\\"${DOMAIN}\\") && PathPrefix(\\"/static\\")"
      - "traefik.http.routers.static.entrypoints=websecure"
      - "traefik.http.routers.static.tls.certresolver=le"
      - "traefik.http.services.static.loadbalancer.server.port=80"
    networks:
      - n8n_net

  bot:
    build: ./bot
    env_file:
      - .env
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

networks:
  n8n_net:

volumes:
  pgdata:
  redisdata:
EOF

# 7) ‚Äî –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã Telegram-–±–æ—Ç–∞
cat > "$BASE/bot/Dockerfile" <<EOF
FROM node:18-alpine
WORKDIR /app
RUN apk add --no-cache docker-cli
COPY package.json bot.js .env ./
RUN npm install
CMD ["npm","start"]
EOF

cat > "$BASE/bot/package.json" <<EOF
{
  "name": "n8n-admin-tg-bot",
  "version": "1.0.0",
  "main": "bot.js",
  "dependencies": {
    "dotenv": "^16.3.1",
    "node-telegram-bot-api": "^0.61.0"
  }
}
EOF

cat > "$BASE/bot/bot.js" <<EOF
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const bot = new TelegramBot(process.env.TG_BOT_TOKEN, { polling: true });
const send = (msg,opt={}) => bot.sendMessage(process.env.TG_USER_ID, msg, opt);

bot.onText(/\\/status/, () => {
  exec('uptime && docker ps --format "{{.Names}}\\t{{.Status}}"', (e,o,er) =>
    send(er ? \`‚ùå \${er}\` : \`üìä *–°—Ç–∞—Ç—É—Å:*\n\`\`\`\n\${o}\n\`\`\`\`, { parse_mode:'Markdown' })
  );
});

bot.onText(/\\/logs/, () => {
  exec('docker logs --tail 100 n8n', (e,o,er) =>
    send(er ? \`‚ùå \${er}\` : \`üìù *–õ–æ–≥–∏ n8n:*\n\`\`\`\n\${o}\n\`\`\`\`, { parse_mode:'Markdown' })
  );
});

bot.onText(/\\/backup/, () => {
  const cmd = 'docker exec n8n n8n export:workflow --all --output=/tmp/all.json && docker cp n8n:/tmp/all.json /tmp/all.json';
  exec(cmd, (e,o,er) => {
    if (er) return send(\`‚ùå \${er}\`);
    bot.sendDocument(process.env.TG_USER_ID, '/tmp/all.json');
  });
});

bot.onText(/\\/update/, () => {
  exec('docker pull n8nio/n8n:latest && docker compose up -d n8n', (e,o,er) =>
    send(er ? \`‚ùå \${er}\` : '‚úÖ *n8n –æ–±–Ω–æ–≤–ª—ë–Ω!*', { parse_mode:'Markdown' })
  );
});
EOF

# 8) ‚Äî –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—ç–∫
cd "$BASE"
docker compose pull
docker compose up -d

echo
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ –∞–¥—Ä–µ—Å—É: https://$DOMAIN"

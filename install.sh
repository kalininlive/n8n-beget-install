#!/usr/bin/env bash
set -euo pipefail

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo "=== üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ n8n —Å –±–æ—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ==="
DOMAIN="n8n.kalininlive.ru"
EMAIL="info@kalininlive.ru"
TG_BOT_TOKEN="8013093851:AAFYwCrXkIicl6GMXV1cJnEhBOtYhbk5Z_I"
TG_USER_ID="1694739756"
POSTGRES_PASSWORD="Ct^%^6DR5eaftgty7uED"

# 1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "‚Üí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç –∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –ø–∞–∫–µ—Ç–æ–≤..."
apt update && apt upgrade -y
apt install -y ca-certificates curl gnupg lsb-release ufw uuid-runtime openssl git ffmpeg imagemagick python3 python3-pip libavcodec-extra

# 2) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∏ Docker Compose
echo "‚Üí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
if ! command -v docker &>/dev/null; then
  curl -fsSL https://get.docker.com | sh
fi
if ! docker compose version &>/dev/null; then
  apt install -y docker-compose-plugin
fi

# 3) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è n8n
echo "‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è..."
N8N_ENCRYPTION_KEY=$(uuidgen || openssl rand -hex 32)
echo "‚Üí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: $N8N_ENCRYPTION_KEY"

# 4) –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –±—ç–∫–∞–ø–æ–≤
BASE="/opt/n8n"
echo "‚Üí –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –±—ç–∫–∞–ø–æ–≤..."
mkdir -p "$BASE"/n8n_data/{files,tmp,backups}
mkdir -p "$BASE"/static
mkdir -p "$BASE"/cron
mkdir -p "$BASE/traefik_data"  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Traefik
touch "$BASE/traefik_data/acme.json"  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ acme.json
chmod 600 "$BASE/traefik_data/acme.json"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —Ñ–∞–π–ª–∞

# –ù–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo "‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
chmod 777 "$BASE/n8n_data/tmp"  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ /tmp
chmod 777 "$BASE/n8n_data/backups"  # –ü—Ä–∞–≤–∞ –Ω–∞ –±—ç–∫–∞–ø—ã

# 5) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
echo "‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
ufw allow OpenSSH
ufw allow http
ufw allow https
ufw --force enable

# 6) –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Dockerfile –¥–ª—è n8n
cp "$(dirname "$0")/Dockerfile.n8n" "$BASE/Dockerfile.n8n"
cd "$BASE"
docker build -f Dockerfile.n8n -t kalininlive/n8n:yt-dlp .

# 7) –°–æ–∑–¥–∞–Ω–∏–µ Docker-—Å–µ—Ç–µ–π –∏ —Ç–æ–º–æ–≤
docker network create n8n || true
docker volume create n8n_db_storage || true
docker volume create n8n_n8n_storage || true
docker volume create n8n_redis_storage || true

# 8) –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (PostgreSQL, Redis, Traefik, n8n)
echo "‚Üí –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker run -d --name n8n-postgres --restart always --network n8n \
  -e POSTGRES_USER=user \
  -e POSTGRES_PASSWORD="$POSTGRES_PASSWORD" \
  -e POSTGRES_DB=n8n \
  -v n8n_db_storage:/var/lib/postgresql/data \
  postgres:15-alpine

docker run -d --name n8n-redis --restart always --network n8n \
  -v n8n_redis_storage:/data \
  redis:7-alpine

docker run -d --name n8n-traefik --restart always --network n8n \
  -p 80:80 -p 443:443 \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v "$BASE/traefik_data/acme.json":/acme.json \
  traefik:2.10.4 \
    --providers.docker=true \
    --providers.docker.exposedbydefault=false \
    --entrypoints.web.address=:80 \
    --entrypoints.websecure.address=:443 \
    --certificatesresolvers.le.acme.httpchallenge.entrypoint=web \
    --certificatesresolvers.le.acme.email="$EMAIL" \
    --certificatesresolvers.le.acme.storage=/acme.json

docker run -d --name n8n-static --restart always --network n8n \
  -v "$BASE/static":/usr/share/nginx/html:ro \
  -l "traefik.enable=true" \
  -l "traefik.http.routers.static.rule=Host(\"$DOMAIN\") && PathPrefix(\"/static\")" \
  -l "traefik.http.routers.static.entrypoints=websecure" \
  -l "traefik.http.routers.static.tls.certresolver=le" \
  -l "traefik.http.services.static.loadbalancer.server.port=80" \
  nginx:alpine

docker run -d --name n8n-app --restart always --network n8n \
  -v "$BASE/static":/static \
  -v "$BASE/n8n_data/files":/files \
  -v "$BASE/n8n_data/tmp":/tmp \
  -v "$BASE/n8n_data/backups":/backups \
  -l "traefik.enable=true" \
  -l "traefik.http.routers.n8n.rule=Host(\"$DOMAIN\")" \
  -l "traefik.http.routers.n8n.entrypoints=websecure" \
  -l "traefik.http.routers.n8n.tls.certresolver=le" \
  -l "traefik.http.services.n8n.loadbalancer.server.port=5678" \
  -e N8N_BASIC_AUTH_ACTIVE=false \
  -e N8N_PROTOCOL=https \
  -e N8N_HOST="$DOMAIN" \
  -e WEBHOOK_URL="https://$DOMAIN/" \
  -e NODE_ENV=production \
  -e DB_TYPE=postgresdb \
  -e DB_POSTGRESDB_HOST=n8n-postgres \
  -e DB_POSTGRESDB_PORT=5432 \
  -e DB_POSTGRESDB_DATABASE=n8n \
  -e DB_POSTGRESDB_USER=user \
  -e DB_POSTGRESDB_PASSWORD="$POSTGRES_PASSWORD" \
  -e N8N_ENCRYPTION_KEY="$N8N_ENCRYPTION_KEY" \
  -e GENERIC_TIMEZONE=Europe/Amsterdam \
  -e QUEUE_BULL_REDIS_HOST=n8n-redis \
  -e EXECUTIONS_DATA_PRUNE=true \
  -e EXECUTIONS_DATA_MAX_AGE=168 \
  -e N8N_DEFAULT_BINARY_DATA_MODE=filesystem \
  kalininlive/n8n:yt-dlp

# 9) –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
echo "‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞..."
mkdir -p "$BASE/cron"
cp "$BASE/../n8n-install/backup_n8n.sh" "$BASE/cron/backup_n8n.sh"
chmod +x "$BASE/cron/backup_n8n.sh"
echo "TG_BOT_TOKEN=\"$TG_BOT_TOKEN\"" > "$BASE/cron/.env"
echo "TG_USER_ID=\"$TG_USER_ID\"" >> "$BASE/cron/.env"
echo "DOMAIN=\"$DOMAIN\"" >> "$BASE/cron/.env"

# 10) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º
echo "‚Üí –ù–∞—Å—Ç—Ä–æ–∏–º cron –¥–ª—è –∞–≤—Ç–æ-–±—ç–∫–∞–ø–æ–≤..."
(crontab -l 2>/dev/null; echo "0 3 * * * /opt/n8n-install/cron/backup_n8n.sh") | crontab -
echo "‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö cron –∑–∞–¥–∞–Ω–∏–π..."
crontab -l
echo "‚Üí Cron –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞."

# 11) –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
echo "\nüì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤..."
if docker ps -q -f name=n8n-app; then
  echo "‚Üí –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä n8n –∑–∞–ø—É—â–µ–Ω. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤..."
  docker exec -u 0 n8n-app apk info | sort > "$BASE/n8n_data/backups/n8n_installed_apk.txt"
  docker exec -u 0 n8n-app /venv/bin/pip list > "$BASE/n8n_data/backups/n8n_installed_pip.txt"
  {
    echo -n "yt-dlp: "; docker exec -u 0 n8n-app yt-dlp --version
    echo -n "ffmpeg: "; docker exec -u 0 n8n-app ffmpeg -version | head -n 1
    echo -n "python3: "; docker exec -u 0 n8n-app python3 --version
  } > "$BASE/n8n_data/backups/n8n_versions.txt"
  VERSIONS=$(cat "$BASE/n8n_data/backups/n8n_versions.txt")
  curl -s -X POST https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage \
       -d chat_id=$TG_USER_ID \
       --data-urlencode "text=‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\nüìÑ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:\n$VERSIONS"
  echo "\nüìÑ –°–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
  echo "‚Üí $BASE/n8n_data/backups/n8n_installed_apk.txt"
  echo "‚Üí $BASE/n8n_data/backups/n8n_installed_pip.txt"
  echo "‚Üí $BASE/n8n_data/backups/n8n_versions.txt"
else
  echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä n8n –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤."
fi

# 12) –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ n8n
echo "‚Üí –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ n8n..."
sudo chmod 600 /home/node/.n8n/config

# 13) –í–∫–ª—é—á–∞–µ–º task runners –¥–ª—è n8n
echo "‚Üí –í–∫–ª—é—á–∞–µ–º task runners –¥–ª—è n8n..."
export N8N_RUNNERS_ENABLED=true

echo "\nüìÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ https://$DOMAIN"
